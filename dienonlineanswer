
import burlap.behavior.singleagent.planning.stochastic.valueiteration.ValueIteration;
import burlap.behavior.statehashing.DiscreteStateHashFactory;
import burlap.domain.singleagent.graphdefined.GraphDefinedDomain;
import burlap.oomdp.auxiliary.DomainGenerator;
import burlap.oomdp.auxiliary.common.NullTermination;
import burlap.oomdp.core.*;
import burlap.oomdp.singleagent.GroundedAction;
import burlap.oomdp.singleagent.RewardFunction;
import burlap.domain.singleagent.graphdefined.GraphTF;

public class DieN {
    
    private int numStates;
	private int numActions;
	private double gamma;
	private boolean [] isBadSide;
	
	private double [][][] rewards;
	private double [][][] transitions;
	private boolean [] terminals;
	
	private MDPSolver mdpSolver;
	
	public DieN(int numSides, boolean [] isBadSide){
		
		this.numStates = numSides + 1;
		this.numActions = 2;	// 0: roll, 1: quit
		this.gamma = .5;
		this.isBadSide = isBadSide;
		
		this.rewards = new double [numStates][2][numStates];
		this.transitions = new double [numStates][2][numStates];
		this.terminals = new boolean [this.numStates];
		
		setRewards();
		setTransitions();
		setTerminalStates();
		
		mdpSolver = new MDPSolver(numStates, numActions, transitions, rewards, terminals);
	}
	
	public double expectedValue(){
		
		return mdpSolver.valueOfState(0, this.gamma);
	}
	
	public String actionToTake(int score){
		
		return "roll";
	} 
	
	private void setRewards(){
		
		// rewards are set for roll action, rewards for quit action are 0
		
		for(int i = 0; i < this.numStates - 1; i++){
			for(int k = 0; k < this.numStates - 1; k++){
				
				if(this.isBadSide[k] == true){
					this.rewards[i][0][k] = -1000000;
				}
				else{
					this.rewards[i][0][k] = k + 1;
				}
			}
		}		
	}
	
	private void setTransitions(){
		
		for(int i = 0; i < numStates - 1; i++){
			for(int k = 0; k < numStates - 1; k++){
				
				this.transitions[i][0][k] = 1.0 / (numStates - 1);
			}
		}
		
		for(int i = 0; i < numStates - 1; i++){
			
			this.transitions[i][1][numStates - 1] = 1;
		}
	}
	
	private void setTerminalStates(){
		
		for(int i = 0; i < this.isBadSide.length; i++){
			
			this.terminals[i] = this.isBadSide[i];
		}
		
		// quit action ends up in this state with probability 1
		this.terminals[this.numStates - 1] = true;
	}
	
	public static void main(String[] args){
		
		boolean [] badSides = {false, false, false, true, false, false};
		DieN d = new DieN(6, badSides);
		
		System.out.println(d.expectedValue());
	}
    
}

class MDPSolver {
    
    private int numStates;
	private int numActions;
	
	DomainGenerator dg;
	Domain domain;
	State initState;
	RewardFunction rf;
	TerminalFunction tf;
	DiscreteStateHashFactory hashFactory;
	
	public MDPSolver(int numStates, int numActions, double[][][] probabilitiesOfTransitions, double[][][] rewards, boolean [] terminalStates){
		
		this.numStates = numStates;
		this.numActions = numActions;
		
		this.dg = new GraphDefinedDomain(this.numStates);
		this.setTransitions(probabilitiesOfTransitions, terminalStates);
		this.domain = this.dg.generateDomain();
		this.initState = GraphDefinedDomain.getState(this.domain, 0);
		this.rf = new MyRewards(rewards);
		this.tf = new MyTerminalStates(terminalStates);
		this.hashFactory = new DiscreteStateHashFactory();
		
	}
	
	/*
	 *	Checks if probabilities for a given state-action pair add up to 1, except for terminal states
	 * 
	 * */
	private boolean checkProbabilities(double [][][] probabilitiesOfTransitions, boolean [] terminalStates){
		
		for(int i = 0; i < probabilitiesOfTransitions.length; i++){
			
			if(terminalStates[i] == false){
			
				for(int j = 0; j < probabilitiesOfTransitions[i].length; j++){
					
					double sum = 0;
					
					for(int k = 0; k < probabilitiesOfTransitions[i][j].length; k++){
						
						sum += probabilitiesOfTransitions[i][j][k];
					}
					
					if(Math.abs(sum - 1) > 0.0001){
						
						return false;
					}
				}
			}
		}			
		
		return true;				
	}
	
	private void setTransitions(double [][][] probabilitiesOfTransitions, boolean [] terminalStates){
		
		// check if the probabilities add up to 1
		if(checkProbabilities(probabilitiesOfTransitions, terminalStates) == true){
			System.out.println("Probabilities for given state-action pairs add up to 1...");
		}else{
			System.out.println("Probabilities for given state-action pairs doesn't add up to 1 !");
			System.exit(-1);
		}
		
		for(int i = 0; i < probabilitiesOfTransitions.length; i++){
			
			if(terminalStates[i] == false){
			
				for(int j = 0; j < probabilitiesOfTransitions[i].length; j++){
					
					for(int k = 0; k < probabilitiesOfTransitions[i][j].length; k++){
						
						double currentProbability = probabilitiesOfTransitions[i][j][k];
						
						if(currentProbability != 0){
							((GraphDefinedDomain)this.dg).setTransition(i, j, k, currentProbability);
						}
					}
				}
			}
		}
		
	}
	
	private ValueIteration computeValue(double gamma){
		
		double maxDelta = 0.0001;
		int maxIterations = 1000;
		
		ValueIteration vi = new ValueIteration(this.domain, this.rf, this.tf, gamma, this.hashFactory, maxDelta, maxIterations);
		
		vi.planFromState(this.initState);
		
		return vi;				
	}
	
	
	
	public double valueOfState(int state, double gamma){
		
		return computeValue(gamma).value(GraphDefinedDomain.getState(this.domain, state));
	}
	
	class MyRewards implements RewardFunction{
		
		double[][][] rewards;
		
		public MyRewards(double[][][] rewards){
			
			this.rewards = rewards;
		}

		@Override
		public double reward(State s, GroundedAction a, State sprime) {
			
			int id_s = GraphDefinedDomain.getNodeId(s);
			int id_sprime = GraphDefinedDomain.getNodeId(sprime);
			int id_a = Integer.parseInt(a.toString().replaceAll(GraphDefinedDomain.BASEACTIONNAME, ""));
			
			return rewards[id_s][id_a][id_sprime];						
		}
		
	}
	
	class MyTerminalStates implements TerminalFunction{
		
		boolean [] terminalStates;
		
		public MyTerminalStates(boolean [] terminalStates){
			
			this.terminalStates = terminalStates;
		}

		@Override
		public boolean isTerminal(State s) {
			
			int stateId = GraphDefinedDomain.getNodeId(s);
			
			return this.terminalStates[stateId];
		}
		
	}
}
